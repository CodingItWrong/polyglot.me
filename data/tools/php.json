{
	"id": "php",
	"name": "PHP",
	"api": "http://www.php.net/manual/en/",
	"featuresets": {
		"basics": {
			"hello-world": {
				"code": [
					"<html>",
					"<head>",
					"</head>",
					"<body>",
					"<?php echo \"Hello, World!\"; ?>",
					"</body>",
					"</html>"
				]
			}
		},
		"types": {
			"is-boolean": {
				"code": "is_bool($myvar)",
				"api": "http://php.net/manual/en/function.is-bool.php"
			},
			"is-int": {
				"code": "is_int($myvar)",
				"api": "http://php.net/manual/en/function.is-int.php"
			},
			"is-float": {
				"code": "is_float($myvar)",
				"api": "http://php.net/manual/en/function.is-float.php"
			},
			"is-string": {
				"code": "is_string($myvar)",
				"api": "http://php.net/manual/en/function.is-string.php"
			},
			"is-date": {
				"code": "$myvar instanceof DateTime",
				"api": "http://php.net/manual/en/language.operators.type.php"
			},
			"is-array": {
				"code": "is_array($myvar) // includes associative",
				"api": "http://www.php.net/manual/en/function.is-array.php"
			},
			"is-associative-array": {
				"code": "is_array($myvar) // includes non-associative",
				"api": "http://www.php.net/manual/en/function.is-array.php"
			},
			"is-object": {
				"code": "is_object($myvar)",
				"api": "http://www.php.net/manual/en/function.is-object.php"
			},
			"is-function": {
				"code": "is_callable($myvar) // includes function name strings",
				"api": "http://www.php.net/manual/en/function.is-callable.php"
			},
			"is-null": {
				"code": "is_null($myvar)",
				"api": "http://www.php.net/manual/en/function.is-null.php"
			},
			"is-undefined": {
				"code": "isset($myvar) // also matches null",
				"api": "http://www.php.net/manual/en/function.isset.php"
			},
			"string-to-int": {
				"code": "intval( $mystr )",
				"api": "http://php.net/manual/en/function.intval.php"
			},
			"int-to-string": {
				"code": "'' . $myint"
			},
			"string-to-float": {
				"code": "floatval( $mystr )",
				"api": "http://www.php.net/manual/en/function.floatval.php"
			},
			"float-to-string": {
				"code": "'' . $myfloat"
			},
			"float-to-int": {
				"code": "intval( $myfloat )",
				"api": "http://php.net/manual/en/function.intval.php"
			}
		},
		"strings": {
			"length": {
				"code": "strlen($mystring)",
				"api": "http://php.net/manual/en/function.strlen.php"
			},
			"comparison": {
				"code": "$a == $b",
				"api": "http://php.net/manual/en/language.operators.comparison.php",
				"sample": "https://gist.github.com/needbee/8259118"
			},
			"lowercase": {
				"code": "strtolower($str)",
				"api": "http://us2.php.net/strtolower"
			},
			"uppercase": {
				"code": "strtoupper($str)",
				"api": "http://us2.php.net/strtoupper"
			},
			"substring": {
				"code": "substr( $str, $start[, $length] )",
				"api": "http://php.net/manual/en/function.substr.php"
			},
			"concatenate": [
				{
					"code": "$a . $b",
					"api": "http://php.net/manual/en/language.operators.string.php"
				},
				{
					"code": "\"fixed text $a $b\"",
					"api": "http://www.php.net/manual/en/language.types.string.php#language.types.string.parsing"
				}
			],
			"index-of": {
				"code": "strpos( $str, $mysubstring )",
				"api": "http://www.php.net/manual/en/function.strpos.php"
			},
			"trim": {
				"code": "trim($str)",
				"api": "http://php.net/manual/en/function.trim.php"
			},
			"replace": {
				"code": "str_replace( $old, $new, $str )",
				"api": "http://php.net/manual/en/function.str-replace.php"
			},
			"split-on-string": {
				"code": "explode( $delim, $str )",
				"api": "http://www.php.net/manual/en/function.explode.php"
			},
			"split-on-regex": {
				"code": "preg_split( $myregex, $str )",
				"api": "http://www.php.net/manual/en/function.preg-split.php"
			},
			"join": {
				"code": "implode( $delim, $myarray )",
				"api": "http://www.php.net/manual/en/function.implode.php"
			},
			"regex-match": {
				"code": "preg_match( $myregex, $str )",
				"api": "http://www.php.net/manual/en/function.preg-match.php"
			},
			"regex-find": {
				"code": "preg_match_all( $myregex, $str, $matches )",
				"api": "http://www.php.net/manual/en/function.preg-match-all.php"
			},
			"regex-replace": {
				"code": "preg_replace( $myregex, $tmpl, $str )",
				"api": "http://www.php.net/manual/en/function.preg-replace.php"
			}
		},
		"math": {
			"floor": {
				"code": "floor($myfloat)",
				"api": "http://php.net/manual/en/function.floor.php"
			},
			"ceiling": {
				"code": "ceil($myfloat)",
				"api": "http://www.php.net/manual/en/function.ceil.php"
			},
			"round": {
				"code": "round($myfloat)",
				"api": "http://php.net/manual/en/function.round.php"
			},
			"random": {
				"code": "rand( min, max )",
				"api": "http://php.net/manual/en/function.rand.php"
			},
			"min": {
				"code": "min($myarray)",
				"api": "http://php.net/manual/en/function.min.php"
			},
			"max": {
				"code": "max($myarray)",
				"api": "http://www.php.net/manual/en/function.max.php"
			}
		},
		"dates": {
			"date-object": {
				"code": "new DateTime()",
				"version": "5.2",
				"api": "http://www.php.net/manual/en/datetime.construct.php"
			},
			"timestamp": {
				"code": "time()",
				"api": "http://www.php.net/manual/en/function.time.php"
			},
			"format": {
				"code": "$mydate->format($myformat)",
				"version": "5.2",
				"api": "http://www.php.net/manual/en/datetime.format.php"
			},
			"parse": [
				{
					"code": "$dateobj = new DateTime($datestring)",
					"version": "5.2",
					"api": "http://www.php.net/manual/en/datetime.construct.php"
				},
				{
					"code": "$timestamp = strtotime($datestring)",
					"api": "http://www.php.net/manual/en/function.strtotime.php"
				}
			],
			"compare": {
				"code": "$a->diff($b)",
				"api": "http://php.net/manual/en/datetime.diff.php"
			},
			"offset": {
				"code": "$mydate->add( DateInterval::createFromDateString('3 months + 1 day') )",
				"version": "5.3",
				"api": "http://www.php.net/manual/en/dateinterval.createfromdatestring.php"
			}
		},
		"collections": {
			"define": [
				{
					"code": "array(1,2,3,…)",
					"api": "http://php.net/manual/en/language.types.array.php"
				},
				{
					"code": "[1,2,3]",
					"version": "5.4",
					"api": "http://php.net/manual/en/language.types.array.php"
				}
			],
			"define-associative": [
				{
					"code": "array(\"key1\"=>\"val1\", \"key2\"=>\"val2\",…)",
					"api": "http://php.net/manual/en/language.types.array.php"
				},
				{
					"code": "[\"key1\"=>\"val1\", \"key2\"=>\"val2\",…]",
					"version": "5.4",
					"api": "http://php.net/manual/en/language.types.array.php"
				}
			],
			"length": {
				"code": "count($myarray)",
				"api": "http://www.php.net/manual/en/function.count.php"
			},
			"set": {
				"code": "$myarray[$index] = $value",
				"api": "http://www.php.net/manual/en/language.types.array.php"
			},
			"set-associative": {
				"code": "$myarray[$key] = $value",
				"api": "http://www.php.net/manual/en/language.types.array.php"
			},
			"get": {
				"code": "$myarray[$index]",
				"api": "http://www.php.net/manual/en/language.types.array.php"
			},
			"get-associative": {
				"code": "$myarray[$key]",
				"api": "http://www.php.net/manual/en/language.types.array.php"
			},
			"push": {
				"code": "array_push( $myarray, $myval )",
				"api": "http://php.net/manual/en/function.array-push.php"
			},
			"pop": {
				"code": "array_pop( $myarray )",
				"api": "http://www.php.net/manual/en/function.array-pop.php"
			},
			"merge": {
				"code": "array_merge( $a, $b )",
				"api": "http://php.net/manual/en/function.array-merge.php"
			},
			"slice": {
				"code": "array_slice( $myarray, $start, $length )",
				"api": "http://www.php.net/manual/en/function.array-slice.php"
			},
			"for-each": {
				"code": "foreach( $myarray as $myval ) {…}",
				"api": "http://www.php.net/manual/en/control-structures.foreach.php"
			},
			"for-each-associative": {
				"code": "foreach( $myarray as $mykey => $myval ) {…}",
				"api": "http://www.php.net/manual/en/control-structures.foreach.php"
			},
			"keys": {
				"code": "array_keys( $myarray )",
				"api": "http://www.php.net/manual/en/function.array-keys.php"
			},
			"values": {
				"code": "array_values( $myarray )",
				"api": "http://www.php.net/manual/en/function.array-values.php"
			},
			"contains": {
				"code": "in_array( $val, $myarray )",
				"api": "http://www.php.net/manual/en/function.in-array.php"
			},
			"index-of": {
				"code": "array_search( $val, $myarray )",
				"version": "4.0.5",
				"api": "http://www.php.net/manual/en/function.array-search.php"
			},
			"filter": {
				"code": "array_filter( $myarray, function($val) {…} )",
				"version": "4.0.6",
				"api": "http://www.php.net/manual/en/function.array-filter.php"
			},
			"map": {
				"code": "array_map( function($val) {…}, $myarray )",
				"version": "4.0.6",
				"api": "http://www.php.net/manual/en/function.array-map.php"
			},
			"reduce": {
				"code": "array_reduce( $myarray, function($accumulator,$val) {…}, $myinitial )",
				"version": "4.0.5",
				"api": "http://www.php.net/manual/en/function.array-reduce.php"
			},
			"sort": {
				"code": "usort( $myarray, function($a, $b) {…} )",
				"api": "http://www.php.net/manual/en/function.usort.php"
			},
			"reverse": {
				"code": "array_reverse( $myarray )",
				"api": "http://php.net/manual/en/function.array-reverse.php"
			}
		},
		"functions": {
			"define": {
				"code": "function myfunc( $arg1, $arg2 ) {…}",
				"api": "http://www.php.net/manual/en/functions.user-defined.php"
			},
			"call": {
				"code": "myfunc( $val1, $val2 )",
				"api": "http://www.php.net/manual/en/functions.user-defined.php"
			},
			"default-arguments": {
				"code": "function myfunc( $arg1 = 'default', $arg2 = null ) {…}",
				"api": "http://www.php.net/manual/en/functions.arguments.php"
			},
			"n-arguments": {
				"code": [
					"function myfunc() {",
					"    $args = func_get_args();",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/function.func-get-args.php"
			},
			"named-arguments": {
				"code": [
					"function myfunc( $arg_associative_array ) {…}",
					"",
					"myfunc( array( \"foo\"=>27, \"bar\"=>\"baz\" ) );"
				]
			},
			"overloading": [
				{
					"code": "function myfunc( $arg1 = 'default', $arg2 = null ) {…}",
					"api": "http://www.php.net/manual/en/functions.arguments.php"
				},
				{
					"code": [
						"function myfunc() {",
						"    $args = func_get_args();",
						"    …",
						"}"
					],
					"api": "http://www.php.net/manual/en/function.func-get-args.php"
				}
			],
			"define-closure": {
				"code": "$closurevar = function( $arg1, $arg2 ) {…};",
				"api": "http://www.php.net/manual/en/functions.anonymous.php"
			},
			"call-closure": {
				"code": "$closurevar( $val1, $val2 )",
				"api": "http://www.php.net/manual/en/functions.anonymous.php"
			}
		},
		"objects": {
			"define-class": {
				"code": "class MyClass {…}",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"instantiate-class": {
				"code": "$myinstance = new MyClass();",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"instance-of": {
				"code": "$myobj instanceof MyClass",
				"api": "http://php.net/manual/en/language.operators.type.php"
			},
			"class-of": {
				"code": "get_class($myobj)",
				"api": "http://php.net/manual/en/function.get-class.php"
			},
			"define-field": {
				"code": [
					"class MyClass {",
					"    var $myfield = 'default value';",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"access-field": {
				"code": "$myinstance->myfield",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"has-field": {
				"code": "property_exists( $myinstance, 'myfield' )",
				"api": "http://php.net/manual/en/function.property-exists.php"
			},
			"define-method": {
				"code": [
					"class MyClass {",
					"    function mymethod( $arg1, $arg2 ) {…}",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"call-method": {
				"code": "$myinstance->mymethod( $val1, $val2 )",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"has-method": {
				"code": "method_exists( $myinstance, 'myfield' )",
				"api": "http://php.net/manual/en/function.method-exists.php"
			},
			"this": {
				"code": "$this",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"define-constant": {
				"code": [
					"class MyClass {",
					"    const MYCONSTANT = 'thevalue';",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.constants.php"
			},
			"access-constant": {
				"code": "MyClass::MYCONSTANT",
				"api": "http://www.php.net/manual/en/language.oop5.constants.php"
			},
			"define-class-field": {
				"code": [
					"class MyClass {",
					"    public static $myclassfield = 'default value';",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.static.php"
			},
			"access-class-field": {
				"code": "MyClass::$myclassfield",
				"api": "http://www.php.net/manual/en/language.oop5.static.php"
			},
			"define-class-method": {
				"code": [
					"class MyClass {",
					"    public static function myclassmethod() {…}",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.static.php"
			},
			"call-class-method": {
				"code": "MyClass::myclassmethod()",
				"api": "http://www.php.net/manual/en/language.oop5.static.php"
			},
			"constructor": {
				"code": [
					"class MyClass {",
					"    function __construct() {…}",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.decon.php"
			},
			"inheritance": {
				"code": "class MyChildClass extends MyParentClass {…}",
				"api": "http://www.php.net/manual/en/language.oop5.inheritance.php"
			},
			"parent-method": {
				"code": [
					"class MyChildClass extends MyParentClass {",
					"    function mymethod() {",
					"        parent::mymethod();",
					"    }",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php"
			},
			"declare-public": {
				"code": [
					"class MyClass {",
					"    public $myfield;",
					"    public function mymethod() {…}",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.visibility.php"
			},
			"declare-protected": {
				"code": [
					"class MyClass {",
					"    protected $myfield;",
					"    protected function mymethod() {…}",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.visibility.php"
			},
			"declare-private": {
				"code": [
					"class MyClass {",
					"    private $myfield;",
					"    private function mymethod() {…}",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.visibility.php"
			},
			"declare-final": {
				"code": [
					"class MyClass {",
					"    final public function mymethod() {…}",
					"    …",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.final.php"
			},
			"declare-interface": {
				"code": [
					"interface MyInterface {",
					"    public function myfunction();",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.interfaces.php"
			},
			"implement-interface": {
				"code": [
					"class MyClass implements MyInterface {",
					"    public function myfunction() {…}",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.interfaces.php"
			},
			"abstract-class": {
				"code": [
					"abstract class MyClass {",
					"    abstract protected function myAbstractFunction();",
					"",
					"    public function myConcreteFunction(…);",
					"}"
				],
				"api": "http://www.php.net/manual/en/language.oop5.abstract.php"
			}
		},
		"serialization": {
			"json-encode": {
				"code": "json_encode( $myObjOrArray )",
				"api": "http://www.php.net/manual/en/function.json-encode.php"
			},
			"json-decode": {
				"code": "json_decode( $myJsonString )",
				"api": "http://www.php.net/manual/en/function.json-decode.php"
			},
			"xml-decode": {
				"code": [
					"$rootElement = new SimpleXMLElement( $myXmlString );",
					"$rootElement->myChildElement[2]"
				],
				"api": "http://www.php.net/manual/en/simplexml.examples-basic.php"
			}
		},
		"http-server": {
			"output": {
				"code": "echo \"Hello, World!\"",
				"api": "http://php.net/manual/en/function.echo.php"
			},
			"get-data": {
				"code": "$_GET['myvar']",
				"api": "http://php.net/manual/en/reserved.variables.get.php"
			},
			"post-data-form": {
				"code": "$_POST['myvar']",
				"api": "http://www.php.net/manual/en/reserved.variables.post.php"
			},
			"post-data-raw": {
				"code": "file_get_contents(\"php://input\")",
				"api": "http://us.php.net/manual/en/wrappers.php.php"
			},
			"uploaded-file": {
				"code": [
					"$_FILES['filefieldname']",
					"// has fields name, type, size, tmp_name, and error",
					"move_uploaded_file( $_FILES['filefieldname']['tmp_name'], 'path/to/destination.ext' )"
				],
				"api": "http://www.php.net/manual/en/reserved.variables.files.php"
			},
			"get-cookie": {
				"code": "$_COOKIE['cookiename']",
				"api": "http://www.php.net/manual/en/reserved.variables.cookies.php"
			},
			"set-cookie": {
				"code": "setcookie( $name, $value, $expiration_timestamp, $path_restriction, $domain_restriction, $https_only )",
				"api": "http://php.net/manual/en/function.setcookie.php"
			},
			"get-header": {
				"code": "$_SERVER['headername']",
				"api": "http://www.php.net/manual/en/reserved.variables.server.php"
			},
			"set-header": {
				"code": "header( $name_and_value )",
				"api": "http://php.net/manual/en/function.header.php"
			},
			"status-code": {
				"code": "http_response_code( $code )",
				"api": "http://php.net/manual/en/function.http-response-code.php"
			},
			"content-type": {
				"code": "header( 'Content-type: ' . $type )",
				"api": "http://php.net/manual/en/function.header.php"
			},
			"redirect": {
				"code": "header( 'Location: '.$url )",
				"api": "http://php.net/manual/en/function.header.php"
			},
			"get-session-var": {
				"code": [
					"session_start();",
					"$_SESSION['key']"
				],
				"api": "http://www.php.net/manual/en/session.examples.basic.php"
			},
			"set-session-var": {
				"code": [
					"session_start();",
					"$_SESSION['key'] = $value;"
				],
				"api": "http://www.php.net/manual/en/session.examples.basic.php"
			},
			"remove-session-var": {
				"code": [
					"session_start();",
					"unset($_SESSION['key'])"
				],
				"api": "http://www.php.net/manual/en/session.examples.basic.php"
			}
		},
		"database": {
			"connect": {
				"code": "$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass)",
				"api": "http://www.php.net/manual/en/pdo.connections.php"
			},
			"disconnect": {
				"code": "$dbh = null",
				"api": "http://www.php.net/manual/en/pdo.connections.php"
			},
			"execute-hardcoded": {
				"code": "$dbh->exec(\"SELECT * FROM mytable WHERE status = 'live'\");",
				"api": "http://www.php.net/manual/en/pdo.transactions.php"
			},
			"execute-dynamic": {
				"code": [
					"$stmt = $dbh->prepare(\"INSERT INTO REGISTRY (name, value) VALUES (:name, :value)\");",
					"$stmt->bindParam(':name', $name);",
					"$stmt->bindParam(':value', $value);",
					"$stmt->execute();"
				],
				"api": "http://www.php.net/manual/en/pdo.prepared-statements.php"
			},
			"row-count": {
				"code": "$stmt->rowCount()",
				"api": "http://ellislab.com/codeigniter/user-guide/database/results.html"
			},
			"retrieve-row": {
				"code": "while ($row = $stmt->fetch()) {…}",
				"api": "http://www.php.net/manual/en/pdostatement.fetch.php"
			},
			"retrieve-all-rows": {
				"code": "$stmt->fetchAll()",
				"api": "http://www.php.net/manual/en/pdostatement.fetchall.php"
			},
			"new-row-id": {
				"code": "PDO::lastInsertId",
				"api": "http://php.net/manual/en/pdo.lastinsertid.php"
			}
		},
		"http-client": {
			"simple-request": {
				"code": [
					"$ch = curl_init('http://www.example.com/');",
					"curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);",
					"$output = curl_exec($ch);",
					"curl_close($ch);"
				],
				"api": "http://php.net/manual/en/curl.examples.php"
			},
			"full-request": {
				"code": [
					"$ch = curl_init('http://www.example.com/');",
					"curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);",
					"curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST'); // or PUT or DELETE",
					"curl_setopt($ch, CURLOPT_PORT, 1234);",
					"curl_setopt($ch, CURLOPT_HTTPHEADER, $headerArray);",
					"curl_setopt($ch, CURLOPT_COOKIE, $mycookie);",
					"curl_setopt($ch, CURLOPT_POSTFIELDS, $dataArray);",
					"$output = curl_exec($ch);",
					"curl_close($ch);"
				],
				"api": "http://www.php.net/manual/en/function.curl-setopt.php"
			}
		}
	},
	"templating": {
		"render-to-browser": {
			"code": "include 'viewfile.php'",
			"api": "http://www.php.net/manual/en/function.include.php"
		},
		"render-to-variable": {
			"code": [
				"ob_start();",
				"include 'viewview.php';",
				"$html = ob_get_clean();",
			],
			"api": "http://www.php.net/manual/en/function.ob-get-clean.php"
		},
		"output-raw": [
			{
				"code": "<?php echo $userGenHtml ?>",
				"api": "http://www.php.net/manual/en/function.echo.php"
			},
			{
				"code": [
					"<?= $userGenHtml ?>",
					"// note: only sometimes on in PHP < 5.4"
				],
				"api": "http://www.php.net/manual/en/function.echo.php"
			}
		],
		"output-escape-html": {
			"code": "<?php echo htmlspecialchars($var, ENT_QUOTES, 'UTF-8') ?>",
			"api": "http://www.php.net/manual/en/function.htmlspecialchars.php"
		},
		"if": {
			"code": [
				"<?php if (count($records) === 1): ?>",
				"    I have one record!",
				"<?php elseif(count($records) > 1): ?>",
				"    I have multiple records!",
				"<?php else: ?>",
				"    I don't have any records!",
				"<?php endif ?>"
			],
			"api": "http://www.php.net/manual/en/control-structures.alternative-syntax.php"
		},
		"while": {
			"code": [
				"<?php while (true): ?>",
				"    I'm looping forever.",
				"<?php endwhile ?>"
			],
			"api": "http://www.php.net/manual/en/control-structures.while.php"
		},
		"for": {
			"code": [
				"<?php for ($i = 0; $i < 10; $i++): ?>",
				"    The current value is {{ $i }}",
				"<? endfor ?>"
			],
			"api": "http://www.php.net/manual/en/control-structures.for.php"
		},
		"for-each": {
			"code": [
				"<? foreach ($users as $user): ?>",
				"    <p>This is user {{ $user->id }}</p>",
				"<? endforeach ?>"
			],
			"api": "http://www.php.net/manual/en/control-structures.foreach.php"
		},
		"comment": {
			"code": "<?php /* This comment will not be in the rendered HTML *? ?>",
			"api": "http://www.php.net/manual/en/language.basic-syntax.comments.php"
		},
		"execute-code": {
			"code": [
				"<?php myfunction($var) ?>",
				"<?php",
				"    // multi",
				"    // lines",
				"?>"
			],
			"api": "http://www.php.net/manual/en/language.basic-syntax.phptags.php"
		},
		"subview": {
			"code": "<?php include 'subviewfile.php' ?>",
			"api": "http://www.php.net/manual/en/function.include.php"
		}
	}
}
