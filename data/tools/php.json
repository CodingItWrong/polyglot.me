{
	"id": "php",
	"name": "PHP",
	"api": "http://www.php.net/manual/en/",
	"featuresets": {
		"basics": {
			"hello-world": {
				"code": "<html>\n<head>\n</head>\n<body>\n<?php echo \"Hello, World!\"; ?>\n</body>\n</html>"
			}
		},
		"types": {
			"string-to-int": {
				"code": "intval( $mystr )",
				"api": "http://php.net/manual/en/function.intval.php"
			},
			"int-to-string": {
				"code": "'' . $myint"
			},
			"string-to-float": {
				"code": "floatval( $mystr )",
				"api": "http://www.php.net/manual/en/function.floatval.php"
			},
			"float-to-string": {
				"code": "'' . $myfloat"
			},
			"float-to-int": {
				"code": "intval( $myfloat )",
				"api": "http://php.net/manual/en/function.intval.php"
			}
		},
		"strings": {
			"length": {
				"code": "strlen($mystring)",
				"api": "http://php.net/manual/en/function.strlen.php"
			},
			"comparison": {
				"code": "$a == $b",
				"api": "http://php.net/manual/en/language.operators.comparison.php",
				"sample": "https://gist.github.com/needbee/8259118"
			},
			"lowercase": {
				"code": "strtolower($str)",
				"api": "http://us2.php.net/strtolower"
			},
			"uppercase": {
				"code": "strtoupper($str)",
				"api": "http://us2.php.net/strtoupper"
			},
			"substring": {
				"code": "substr( $str, $start[, $length] )",
				"api": "http://php.net/manual/en/function.substr.php"
			},
			"concatenate": [
				{
					"code": "$a . $b",
					"api": "http://php.net/manual/en/language.operators.string.php"
				},
				{
					"code": "\"fixed text $a $b\"",
					"api": "http://www.php.net/manual/en/language.types.string.php#language.types.string.parsing"
				}
			],
			"index-of": {
				"code": "strpos( $str, $mysubstring )",
				"api": "http://www.php.net/manual/en/function.strpos.php"
			},
			"split-on-string": {
				"code": "explode( $delim, $str )",
				"api": "http://www.php.net/manual/en/function.explode.php"
			},
			"split-on-regex": {
				"code": "preg_split( $myregex, $str )",
				"api": "http://www.php.net/manual/en/function.preg-split.php"
			},
			"join": {
				"code": "implode( $delim, $myarray )",
				"api": "http://www.php.net/manual/en/function.implode.php"
			},
			"regex-match": {
				"code": "preg_match( $myregex, $str )",
				"api": "http://www.php.net/manual/en/function.preg-match.php"
			},
			"regex-find": {
				"code": "preg_match_all( $myregex, $str, $matches )",
				"api": "http://www.php.net/manual/en/function.preg-match-all.php"
			},
			"regex-replace": {
				"code": "preg_replace( $myregex, $tmpl, $str )",
				"api": "http://www.php.net/manual/en/function.preg-replace.php"
			}
		},
		"math": {
			"floor": {
				"code": "floor($myfloat)",
				"api": "http://php.net/manual/en/function.floor.php"
			},
			"ceiling": {
				"code": "ceil($myfloat)",
				"api": "http://www.php.net/manual/en/function.ceil.php"
			},
			"round": {
				"code": "round($myfloat)",
				"api": "http://php.net/manual/en/function.round.php"
			},
			"random": {
				"code": "rand( min, max )",
				"api": "http://php.net/manual/en/function.rand.php"
			},
			"min": {
				"code": "min($myarray)",
				"api": "http://php.net/manual/en/function.min.php"
			},
			"max": {
				"code": "max($myarray)",
				"api": "http://www.php.net/manual/en/function.max.php"
			}
		},
		"dates": {
			"date-object": {
				"code": "new DateTime()",
				"version": "5.2",
				"api": "http://www.php.net/manual/en/datetime.construct.php"
			},
			"timestamp": {
				"code": "time()",
				"api": "http://www.php.net/manual/en/function.time.php"
			},
			"format": {
				"code": "$mydate->format($myformat)",
				"version": "5.2",
				"api": "http://www.php.net/manual/en/datetime.format.php"
			},
			"parse": [
				{
					"code": "$dateobj = new DateTime($datestring)",
					"version": "5.2",
					"api": "http://www.php.net/manual/en/datetime.construct.php"
				},
				{
					"code": "$timestamp = strtotime($datestring)",
					"api": "http://www.php.net/manual/en/function.strtotime.php"
				}
			],
			"compare": {
				"code": "$a->diff($b)",
				"api": "http://php.net/manual/en/datetime.diff.php"
			},
			"offset": {
				"code": "$mydate->add( DateInterval::createFromDateString('3 months + 1 day') )",
				"version": "5.3",
				"api": "http://www.php.net/manual/en/dateinterval.createfromdatestring.php"
			}
		},
		"collections": {
			"define": [
				{
					"code": "array(1,2,3,…)",
					"api": "http://php.net/manual/en/language.types.array.php"
				},
				{
					"code": "[1,2,3]",
					"version": "5.4",
					"api": "http://php.net/manual/en/language.types.array.php"
				}
			],
			"define-associative": [
				{
					"code": "array(\"key1\"=>\"val1\", \"key2\"=>\"val2\",…)",
					"api": "http://php.net/manual/en/language.types.array.php"
				},
				{
					"code": "[\"key1\"=>\"val1\", \"key2\"=>\"val2\",…]",
					"version": "5.4",
					"api": "http://php.net/manual/en/language.types.array.php"
				}
			],
			"length": {
				"code": "count($myarray)",
				"api": "http://www.php.net/manual/en/function.count.php"
			},
			"set": {
				"code": "$myarray[$index] = $value",
				"api": "http://www.php.net/manual/en/language.types.array.php"
			},
			"set-associative": {
				"code": "$myarray[$key] = $value",
				"api": "http://www.php.net/manual/en/language.types.array.php"
			},
			"get": {
				"code": "$myarray[$index]",
				"api": "http://www.php.net/manual/en/language.types.array.php"
			},
			"get-associative": {
				"code": "$myarray[$key]",
				"api": "http://www.php.net/manual/en/language.types.array.php"
			},
			"push": {
				"code": "array_push( $myarray, $myval )",
				"api": "http://php.net/manual/en/function.array-push.php"
			},
			"pop": {
				"code": "array_pop( $myarray )",
				"api": "http://www.php.net/manual/en/function.array-pop.php"
			},
			"merge": {
				"code": "array_merge( $a, $b )",
				"api": "http://php.net/manual/en/function.array-merge.php"
			},
			"slice": {
				"code": "array_slice( $myarray, $start, $length )",
				"api": "http://www.php.net/manual/en/function.array-slice.php"
			},
			"for-each": {
				"code": "foreach( $myarray as $myval ) {…}",
				"api": "http://www.php.net/manual/en/control-structures.foreach.php"
			},
			"for-each-associative": {
				"code": "foreach( $myarray as $mykey => $myval ) {…}",
				"api": "http://www.php.net/manual/en/control-structures.foreach.php"
			},
			"keys": {
				"code": "array_keys( $myarray )",
				"api": "http://www.php.net/manual/en/function.array-keys.php"
			},
			"values": {
				"code": "array_values( $myarray )",
				"api": "http://www.php.net/manual/en/function.array-values.php"
			},
			"contains": {
				"code": "in_array( $val, $myarray )",
				"api": "http://www.php.net/manual/en/function.in-array.php"
			},
			"index-of": {
				"code": "array_search( $val, $myarray )",
				"version": "4.0.5",
				"api": "http://www.php.net/manual/en/function.array-search.php"
			},
			"filter": {
				"code": "array_filter( $myarray, function($val) {…} )",
				"version": "4.0.6",
				"api": "http://www.php.net/manual/en/function.array-filter.php"
			},
			"map": {
				"code": "array_map( function($val) {…}, $myarray )",
				"version": "4.0.6",
				"api": "http://www.php.net/manual/en/function.array-map.php"
			},
			"reduce": {
				"code": "array_reduce( $myarray, function($accumulator,$val) {…}, $myinitial )",
				"version": "4.0.5",
				"api": "http://www.php.net/manual/en/function.array-reduce.php"
			},
			"sort": {
				"code": "usort( $myarray, function($a, $b) {…} )",
				"api": "http://www.php.net/manual/en/function.usort.php"
			}
		},
		"functions": {
			"define": {
				"code": "function myfunc( $arg1, $arg2 ) {…}",
				"api": "http://www.php.net/manual/en/functions.user-defined.php"
			},
			"call": {
				"code": "myfunc( $val1, $val2 )",
				"api": "http://www.php.net/manual/en/functions.user-defined.php"
			},
			"default-arguments": {
				"code": "function myfunc( $arg1 = 'default', $arg2 = null ) {…}",
				"api": "http://www.php.net/manual/en/functions.arguments.php"
			},
			"n-arguments": {
				"code": "function myfunc() {\n    $args = func_get_args();\n    …\n}",
				"api": "http://www.php.net/manual/en/function.func-get-args.php"
			},
			"named-arguments": {
				"code": "function myfunc( $arg_associative_array ) {…}\n\nmyfunc( array( \"foo\"=>27, \"bar\"=>\"baz\" ) );"
			},
			"overloading": [
				{
					"code": "function myfunc( $arg1 = 'default', $arg2 = null ) {…}",
					"api": "http://www.php.net/manual/en/functions.arguments.php"
				},
				{
					"code": "function myfunc() {\n    $args = func_get_args();\n    …\n}",
					"api": "http://www.php.net/manual/en/function.func-get-args.php"
				}
			],
			"define-closure": {
				"code": "$closurevar = function( $arg1, $arg2 ) {…};",
				"api": "http://www.php.net/manual/en/functions.anonymous.php"
			},
			"call-closure": {
				"code": "$closurevar( $val1, $val2 )",
				"api": "http://www.php.net/manual/en/functions.anonymous.php"
			}
		},
		"objects": {
			"define-class": {
				"code": "class MyClass {…}",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"instantiate-class": {
				"code": "$myinstance = new MyClass();",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"instance-of": {
				"code": "$myobj instanceof MyClass",
				"api": "http://php.net/manual/en/language.operators.type.php"
			},
			"define-field": {
				"code": "class MyClass {\n    var $myfield = 'default value';\n}",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"access-field": {
				"code": "$myinstance->myfield",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"define-method": {
				"code": "class MyClass {\n    function mymethod( $arg1, $arg2 ) {…}\n}",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"call-method": {
				"code": "$myinstance->mymethod( $val1, $val2 )",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"this": {
				"code": "$this",
				"api": "http://www.php.net/manual/en/language.oop5.basic.php"
			},
			"define-constant": {
				"code": "class MyClass {\n    const MYCONSTANT = 'thevalue';\n    …\n}",
				"api": "http://www.php.net/manual/en/language.oop5.constants.php"
			},
			"access-constant": {
				"code": "MyClass::MYCONSTANT",
				"api": "http://www.php.net/manual/en/language.oop5.constants.php"
			},
			"define-class-field": {
				"code": "class MyClass {\n    public static $myclassfield = 'default value';\n    …\n}",
				"api": "http://www.php.net/manual/en/language.oop5.static.php"
			},
			"access-class-field": {
				"code": "MyClass::$myclassfield",
				"api": "http://www.php.net/manual/en/language.oop5.static.php"
			},
			"define-class-method": {
				"code": "class MyClass {\n    public static function myclassmethod() {…}\n    …\n}",
				"api": "http://www.php.net/manual/en/language.oop5.static.php"
			},
			"call-class-method": {
				"code": "MyClass::myclassmethod()",
				"api": "http://www.php.net/manual/en/language.oop5.static.php"
			},
			"constructor": {
				"code": "class MyClass {\n    function __construct() {…}\n    …\n}",
				"api": "http://www.php.net/manual/en/language.oop5.decon.php"
			},
			"inheritance": {
				"code": "class MyChildClass extends MyParentClass {…}",
				"api": "http://www.php.net/manual/en/language.oop5.inheritance.php"
			},
			"parent-method": {
				"code": "class MyChildClass extends MyParentClass {\n    function mymethod() {\n        parent::mymethod();\n    }\n}",
				"api": "http://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php"
			},
			"declare-public": {
				"code": "class MyClass {\n    public $myfield;\n    public function mymethod() {…}\n    …\n}",
				"api": "http://www.php.net/manual/en/language.oop5.visibility.php"
			},
			"declare-protected": {
				"code": "class MyClass {\n    protected $myfield;\n    protected function mymethod() {…}\n    …\n}",
				"api": "http://www.php.net/manual/en/language.oop5.visibility.php"
			},
			"declare-private": {
				"code": "class MyClass {\n    private $myfield;\n    private function mymethod() {…}\n    …\n}",
				"api": "http://www.php.net/manual/en/language.oop5.visibility.php"
			},
			"declare-final": {
				"code": "class MyClass {\n    final public function mymethod() {…}\n    …\n}",
				"api": "http://www.php.net/manual/en/language.oop5.final.php"
			},
			"declare-interface": {
				"code": "interface MyInterface {\n    public function myfunction();\n}",
				"api": "http://www.php.net/manual/en/language.oop5.interfaces.php"
			},
			"implement-interface": {
				"code": "class MyClass implements MyInterface {\n    public function myfunction() {…}\n}",
				"api": "http://www.php.net/manual/en/language.oop5.interfaces.php"
			},
			"abstract-class": {
				"code": "abstract class MyClass {\n    abstract protected function myAbstractFunction();\n\n    public function myConcreteFunction(…);\n}",
				"api": "http://www.php.net/manual/en/language.oop5.abstract.php"
			}
		}
	}
}
