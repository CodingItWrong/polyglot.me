{
	"featuresets": [
		{
			"id": "types",
			"name": "Types",
			"features": [
				{
					"id": "string-to-int",
					"name": "String to Integer",
					"description": "converts string mystr into an integer"
				},
				{
					"id": "int-to-string",
					"name": "Integer to String",
					"description": "converts integer myint into a string"
				},
				{
					"id": "string-to-float",
					"name": "String to Float",
					"description": "converts string mystr into a floating point number"
				},
				{
					"id": "float-to-string",
					"name": "Float to String",
					"description": "converts floating point number myfloat into a string"
				},
				{
					"id": "float-to-int",
					"name": "Float to Integer",
					"description": "converts floating point number myfloat into an integer"
				}
			]
		},
		{
			"id": "strings",
			"name": "Strings",
			"features": [
				{
					"id": "length",
					"name": "String Length",
					"description": "return number of characters in string"
				},
				{
					"id": "comparison",
					"name": "String Comparison",
					"description": "check if string variables a and b are the same string"
				},
				{
					"id": "lowercase",
					"name": "Lower Case",
					"description": "convert string str to lower case"
				},
				{
					"id": "uppercase",
					"name": "Upper Case",
					"description": "convert string str to upper case"
				},
				{
					"id": "concatenate",
					"name": "Concatenate",
					"description": "join string a and b into a single string"
				},
				{
					"id": "substring",
					"name": "Substring",
					"description": "retrieve characters start thru end (or length) of string str"
				},
				{
					"id": "index-of",
					"name": "Index of Substring",
					"description": "find out what position a substring mysubstring is within a string str"
				},
				{
					"id": "split-on-string",
					"name": "Split on String",
					"description": "split a string str into multiple strings wherever a delimiter string delim is found"
				},
				{
					"id": "split-on-regex",
					"name": "Split on Regex",
					"description": "split a string str into multiple strings wherever a delimiter regex myregex matches"
				},
				{
					"id": "join",
					"name": "Join",
					"description": "joins elements in array myarray into a single string, joined by delimiter string delim"
				},
				{
					"id": "regex-match",
					"name": "Regex Match",
					"description": "returns whether or not a given regex myregex matches in a string str"
				},
				{
					"id": "regex-find",
					"name": "Regex Find",
					"description": "find all the matches to a regex myregex in a string str"
				},
				{
					"id": "regex-replace",
					"name": "Regex Replace",
					"description": "replaces all regex myregex matches in string str with a replacement template tmpl (containing placeholders $1, $2 etc)"
				}
			]
		},
		{
			"id": "math",
			"name": "Math",
			"features": [
				{
					"id": "floor",
					"name": "Floor",
					"description": "rounds down float myfloat to the nearest integer below the decimal"
				},
				{
					"id": "ceiling",
					"name": "Ceiling",
					"description": "rounds up float myfloatto the nearest integer below the decimal"
				},
				{
					"id": "round",
					"name": "Round",
					"description": "rounds float myfloat to the nearest integer to the decimal, up or down"
				},
				{
					"id": "fraction-part",
					"name": "Fraction Part",
					"description": "finds the fraction part of the decimal number mynum"
				},
				{
					"id": "random",
					"name": "Random",
					"description": "returns a random number"
				},
				{
					"id": "min",
					"name": "Min",
					"description": "finds the minimum value in the array myarray"
				},
				{
					"id": "max",
					"name": "Max",
					"description": "finds the maximum value in the array myarray"
				}
			]
		},
		{
			"id": "dates",
			"name": "Dates",
			"features": [
				{
					"id": "date-object",
					"name": "Date Object",
					"description": "get an object representing the current date and time"
				},
				{
					"id": "timestamp",
					"name": "Timestamp",
					"description": "get time in milliseconds from date object mydate"
				},
				{
					"id": "format",
					"name": "Format",
					"description": "format date mydate into a string using format specifier myformat (details on format specifier in the API docs)"
				},
				{
					"id": "parse",
					"name": "Parse",
					"description": "parse a string $datestring into a date object"
				},
				{
					"id": "compare",
					"name": "Compare",
					"description": "determine if date a is equal to, earlier than, or later than date b"
				},
				{
					"id": "offset",
					"name": "Offset",
					"description": "alter the date mydate by a fixed interval"
				}
			]
		},
		{
			"id": "collections",
			"name": "Collections",
			"features": [
				{
					"id": "define",
					"name": "Define Array",
					"description": "creates a new array from static values"
				},
				{
					"id": "define-associative",
					"name": "Define Associative Array",
					"description": "creates a new associative array from static values"
				},
				{
					"id": "length",
					"name": "Array Length",
					"description": "return the number of elements in array myarray (a.k.a. size, count)"
				},
				{
					"id": "push",
					"name": "Push",
					"description": "add value myval onto end of array myarray"
				},
				{
					"id": "pop",
					"name": "Pop",
					"description": "remove value from end of array myarray and return it"
				},
				{
					"id": "merge",
					"name": "Merge",
					"description": "join array a and b into a single array with all the elements of each"
				},
				{
					"id": "slice",
					"name": "Slice",
					"description": "retrieve elements start through end (or length) of array myarray"
				},
				{
					"id": "for-each",
					"name": "For Each",
					"description": "execute code for each element in array myarray, setting the variable myval to each element"
				},
				{
					"id": "for-each-associative",
					"name": "For Each Associative",
					"description": "execute code for each element in array myarray, setting the variable myval to each value and mykey to the corresponding key"
				},
				{
					"id": "keys",
					"name": "Keys",
					"description": "get all keys in associative array myarray"
				},
				{
					"id": "values",
					"name": "Values",
					"description": "get all values in associative array myarray"
				},
				{
					"id": "contains",
					"name": "Contains",
					"description": "returns true if array myarray contains value val"
				},
				{
					"id": "index-of",
					"name": "Index Of",
					"description": "returns the index of first instance of value val in array myarray"
				},
				{
					"id": "filter",
					"name": "Filter",
					"description": "returns all elements in array myarray for which closure mycond returns true"
				},
				{
					"id": "map",
					"name": "Map",
					"description": "create a new array by running code on each value val of original array myarray"
				},
				{
					"id": "reduce",
					"name": "Reduce",
					"description": "loops through values val in array myarray, using a function to apply it to a single resulting value, starting with initial value myinitial"
				},
				{
					"id": "sort",
					"name": "Sort",
					"description": "sorts values in myarray by running a comparison function"
				}
			]
		},
		{
			"id": "functions",
			"name": "Functions",
			"features": [
				{
					"id": "define",
					"name": "Define",
					"description": "define a function myfunc with integer arguments arg1 and arg2, returning an integer"
				},
				{
					"id": "call",
					"name": "Call",
					"description": "call a function myfunc passing in arguments val1 and val2"
				},
				{
					"id": "default-arguments",
					"name": "Default Arguments",
					"description": "allows default values to be set for some arguments, so they do not need to be passed in"
				},
				{
					"id": "n-arguments",
					"name": "N Arguments",
					"description": "allow a variable number of arguments"
				},
				{
					"id": "named-arguments",
					"name": "Named Arguments",
					"description": "clarify arguments with names"
				},
				{
					"id": "overloading",
					"name": "Overloading",
					"description": "define multiple functions with the same name but different arguments"
				},
				{
					"id": "define-closure",
					"name": "Define Closure",
					"description": "create an anonymous function (a.k.a. a block), which can't be called by name but is instead stored in a variable"
				},
				{
					"id": "call-closure",
					"name": "Call Closure",
					"description": "call an anonymous function stored in a variable"
				}
			]
		},
		{
			"id": "objects",
			"name": "Objects",
			"features": [
				{
					"id": "define-class",
					"name": "Define Class",
					"description": "define a class with variables and methods"
				},
				{
					"id": "instantiate-class",
					"name": "Instantiate Class",
					"description": "create a new instance of a class"
				},
				{
					"id": "define-field",
					"name": "Define Field",
					"description": "define a member variable/property/attribute/field on a class"
				},
				{
					"id": "access-field",
					"name": "Access Field",
					"description": "access a field on an object"
				},
				{
					"id": "define-method",
					"name": "Define Method",
					"description": "define a member function/method/procedure on a class"
				},
				{
					"id": "call-method",
					"name": "Call Method",
					"description": "call a method on an object"
				},
				{
					"id": "this",
					"name": "This",
					"description": "refer to the current object within a method"
				},
				{
					"id": "define-constant",
					"name": "Define Constant",
					"description": "defines a constant value for a class"
				},
				{
					"id": "access-constant",
					"name": "Access Constant",
					"description": "accesses a constant value for a class"
				},
				{
					"id": "define-static-field",
					"name": "Define Static Field",
					"description": "defines a field shared across all instances of a class"
				},
				{
					"id": "access-static-field",
					"name": "Access Static Field",
					"description": "access a static field on a class"
				},
				{
					"id": "define-static-method",
					"name": "Define Static Method",
					"description": "define a method called on a class, not an instance of it"
				},
				{
					"id": "call-static-method",
					"name": "Call Static Method",
					"description": "call a static method on a class"
				},
				{
					"id": "constructor",
					"name": "Constructor",
					"description": "define a method called when the class is instantiated, to set it up"
				},
				{
					"id": "inheritance",
					"name": "Inheritance",
					"description": "Define a subclass of a parent class, inheriting its variables and methods"
				},
				{
					"id": "parent-method",
					"name": "Parent Method",
					"description": "call the parent class's version of a method"
				},
				{
					"id": "declare-public",
					"name": "Declare Public",
					"description": "declare a field or method to be accessible from anywhere"
				},
				{
					"id": "declare-protected",
					"name": "Declare Protected",
					"description": "declare a field or method to be accessible only from this class, parent, and child classes"
				},
				{
					"id": "declare-private",
					"name": "Declare Private",
					"description": "declare a field or method to be accessible only from this class"
				},
				{
					"id": "declare-final",
					"name": "Declare Final",
					"description": "declare that a method cannot be overridden by child classes"
				},
				{
					"id": "declare-interface",
					"name": "Declare Interface",
					"description": "declare a set of methods a class will provide without implementing them"
				},
				{
					"id": "implement-interface",
					"name": "Implement Interface",
					"description": "define a class that implements the method an interface declares"
				},
				{
					"id": "abstract-class",
					"name": "Abstract Class",
					"description": "declare a class that provides some functionality but leaves other functionality for child classes to implement, and therefore cannot be instantiated itself"
				}
			]
		}
	]
}
