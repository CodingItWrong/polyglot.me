{
	"id": "laravel",
	"name": "Laravel",
	"api": "http://laravel.com/docs",
	"featuresets": {
		"collections": {
			"length": {
				"code": "$collection->count()",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_count"
			},
			"empty": {
				"code": "$collection->isEmpty()",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_isEmpty"
			},
			"get": {
				"code": "$collection->get($mykey)",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_get"
			},
			"set": {
				"code": "$collection->put($mykey,$myvalue)",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_put"
			},
			"push": {
				"code": "$collection->push($myvalue)",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_push"
			},
			"pop": {
				"code": "$collection->pop()",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_pop"
			},
			"merge": {
				"code": "$newcollection = $collection->merge($collectionOrArray)",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_merge"
			},
			"slice": {
				"code": "$collection->slice( $start, $length )",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_slice"
			},
			"for-each": {
				"code": "$collection->each( function($val) {…} )",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_each"
			},
			"filter": {
				"code": "$collection->filter( function($val) {…} )",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_filter"
			},
			"map": {
				"code": "$collection->map( function($val) {…} )",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_map"
			},
			"reduce": {
				"code": "$collection->reduce( function($val,$acc) {…}, $initial )",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_reduce"
			},
			"sort": {
				"code": "$collection->sort( function($a,$b) {…} )",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_sort"
			},
			"reverse": {
				"code": "$collection->reverse()",
				"api": "http://laravel.com/api/4.1/Illuminate/Support/Collection.html#method_reverse"
			}
		},
		"http-server": {
			"output": {
				"code": "return \"Hello, World!\"",
				"api": "http://laravel.com/docs/quick#routing"
			},
			"get-data": {
				"code": "Input::get('myvar')",
				"api": "http://laravel.com/docs/requests#basic-input"
			},
			"post-data-form": {
				"code": "Input::get('myvar') // 'get' as in retrieve, not 'get' as in GET method",
				"api": "http://laravel.com/docs/requests#basic-input"
			},
			"uploaded-file": {
				"code": "Input::file('myfile')->move($destinationPath)",
				"api": "http://laravel.com/docs/requests#files"
			},
			"get-cookie": {
				"code": "Cookie::get('cookiename')",
				"api": "http://laravel.com/docs/requests#cookies"
			},
			"set-cookie": {
				"code": "Cookie::queue($name, $value, $minutes)",
				"api": "http://laravel.com/docs/requests#cookies"
			},
			"get-header": {
				"code": "Request::header('headername')",
				"api": "http://laravel.com/docs/requests#request-information"
			},
			"set-header": {
				"code": [
					"$response = Response::make($contents, $statusCode);",
					"$response->header($headername, $value);"
				],
				"api": "http://laravel.com/docs/responses#basic-responses"
			},
			"status-code": {
				"code": "Response::make($contents, $statusCode)",
				"api": "http://laravel.com/docs/responses#basic-responses"
			},
			"content-type": {
				"code": [
					"$response = Response::make($contents, $statusCode);",
					"$response->header('Content-Type', $value);"
				],
				"api": "http://laravel.com/docs/responses#basic-responses"
			},
			"redirect": {
				"code": [
					"Redirect::to(url)",
					"Redirect::route(mynamedroute,array('param'=>'val'))"
				],
				"api": "http://laravel.com/docs/responses#redirects"
			},
			"get-session-var": {
				"code": "Session::get('key');",
				"api": "http://laravel.com/docs/session#session-usage"
			},
			"set-session-var": {
				"code": "Session::put('key', 'value');",
				"api": "http://laravel.com/docs/session#session-usage"
			},
			"remove-session-var": {
				"code": "Session::forget('key');",
				"api": "http://laravel.com/docs/session#session-usage"
			},
			"get-flash-var": {
				"code": [
					"Session::get('key');",
					"// same as normal session get"
				],
				"api": "http://laravel.com/docs/session#flash-data"
			},
			"set-flash-var": {
				"code": "Session::flash('key', 'value');",
				"api": "http://laravel.com/docs/session#flash-data"
			},
			"remove-flash-var": {
				"code": "Session::keep(array('item1','item2',…));",
				"api": "http://laravel.com/docs/session#flash-data"
			}
		},
		"validation": {
			"validate": {
				"code": [
					"$validator = Validator::make($data, array( 'myfield' => array('required','min:8', … )));",
					"if( $validator->fails() ) {",
					"    $messages = $validator->messages();",
					"    …",
					"}"
				],
				"api": "http://laravel.com/docs/validation#basic-usage"
			},
			"custom-validator": [
				{
					"code": "Validator::extend('my_validator_name', function($attribute, $value, $parameters) {…});",
					"api": "http://laravel.com/docs/validation#custom-validation-rules"
				},
				{
					"code": "Validator::extend('my_validator_name', 'MyValidatorClass@myValidatorName');",
					"api": "http://laravel.com/docs/validation#custom-validation-rules"
				},
				{
					"code": [
						{
							"file": "MyValidatorClass.php",
							"contents": [
								"class MyValidatorClass extends Illuminate\\Validation\\Validator {",
								"    public function my_validator_name( $attribute, $value, $parameters ) {…}",
								"}"
							]
						},
						{
							"file": "(some file run on start)",
							"contents": [
								"Validator::resolver(function($translator, $data, $rules, $messages) {",
								"    return new MyValidatorClass($translator, $data, $rules, $messages);",
								"});"
							]
						}
					],
					"api": "http://laravel.com/docs/validation#custom-validation-rules"
				}
			],
			"required": {
				"code": "required",
				"api": "http://laravel.com/docs/validation#rule-required"
			},
			"required-if": {
				"code": "required_if:field,value",
				"api": "http://laravel.com/docs/validation#rule-required-if"
			},
			"required-with": {
				"code": "required_with:otherfield1,otherfield2,…",
				"api": "http://laravel.com/docs/validation#rule-required-with"
			},
			"required-without": {
				"code": "required_without:otherfield1,otherfield2,…",
				"api": "http://laravel.com/docs/validation#rule-required-without"
			},
			"required-without-all": {
				"code": "required_without_all:otherfield1,otherfield2,…",
				"api": "http://laravel.com/docs/validation#rule-required-without-all"
			},
			"min-length": {
				"code": "min:3",
				"api": "http://laravel.com/docs/validation#rule-min"
			},
			"max-length": {
				"code": "max:12",
				"api": "http://laravel.com/docs/validation#rule-max"
			},
			"exact-length": {
				"code": "size:6",
				"api": "http://laravel.com/docs/validation#rule-size"
			},
			"date": {
				"code": "date",
				"api": "http://laravel.com/docs/validation#rule-date"
			},
			"date-of-format": {
				"code": "date_format:Y-m-d",
				"api": "http://laravel.com/docs/validation#rule-date-format"
			},
			"before-date": {
				"code": "before:'2014-01-26'",
				"api": "http://laravel.com/docs/validation#rule-before"
			},
			"after-date": {
				"code": "after:'2014-01-26'",
				"api": "http://laravel.com/docs/validation#rule-after"
			},
			"email": {
				"code": "email",
				"api": "http://laravel.com/docs/validation#rule-email"
			},
			"url": {
				"code": "url",
				"api": "http://laravel.com/docs/validation#rule-url"
			},
			"active-url": {
				"code": "active_url",
				"api": "http://laravel.com/docs/validation#rule-active-url"
			},
			"ip-address": {
				"code": "ip",
				"api": "http://laravel.com/docs/validation#rule-ip"
			},
			"alphabetic": {
				"code": "alpha",
				"api": "http://laravel.com/docs/validation#rule-alpha"
			},
			"alphanumeric": {
				"code": "alpha_num",
				"api": "http://laravel.com/docs/validation#rule-alpha-num"
			},
			"word-character": {
				"code": "alpha_dash",
				"api": "http://laravel.com/docs/validation#rule-alpha-dash"
			},
			"regex": {
				"code": "regex:mypattern",
				"api": "http://laravel.com/docs/validation#rule-regex"
			},
			"number": {
				"code": "numeric",
				"api": "http://laravel.com/docs/validation#rule-numeric"
			},
			"greater-than": {
				"code": "min:6",
				"api": "http://laravel.com/docs/validation#rule-min"
			},
			"less-than": {
				"code": "max:20",
				"api": "http://laravel.com/docs/validation#rule-max"
			},
			"between": {
				"code": "between:3,12",
				"api": "http://laravel.com/docs/validation#rule-between"
			},
			"equals-field": {
				"code": "same:otherfieldname",
				"api": "http://laravel.com/docs/validation#rule-same"
			},
			"not-equals-field": {
				"code": "different:otherfieldname",
				"api": "http://laravel.com/docs/validation#rule-different"
			},
			"in-list": {
				"code": "in:foo,bar,…",
				"api": "http://laravel.com/docs/validation#rule-in"
			},
			"not-in-list": {
				"code": "not_in:foo,bar,…",
				"api": "http://laravel.com/docs/validation#rule-not-in"
			},
			"accepted": {
				"code": "accepted",
				"api": "http://laravel.com/docs/validation#rule-accepted"
			},
			"confirmed": {
				"code": "confirmed",
				"api": "http://laravel.com/docs/validation#rule-confirmed"
			},
			"exists-in-database": {
				"code": "exists:tablename,columnname",
				"api": "http://laravel.com/docs/validation#rule-exists"
			},
			"not-exists-in-database": {
				"code": "unique:tablename,columnname",
				"api": "http://laravel.com/docs/validation#rule-unique"
			},
			"file-is-image": {
				"code": "image",
				"api": "http://laravel.com/docs/validation#rule-image"
			},
			"file-extension": {
				"code": "mimes:txt,csv",
				"api": "http://laravel.com/docs/validation#rule-mimes"
			},
			"file-size": {
				"code": "size:1024",
				"api": "http://laravel.com/docs/validation#rule-size"
			},
			"file-min-size": {
				"code": "size:1024",
				"api": "http://laravel.com/docs/validation#rule-size"
			},
			"file-max-size": {
				"code": "size:1024",
				"api": "http://laravel.com/docs/validation#rule-size"
			}
		},
		"database": {
			"connect": {
				"code": "$this->load->database()",
				"api": "http://ellislab.com/codeigniter/user-guide/database/connecting.html"
			},
			"disconnect": {
				"code": "$this->db->close()",
				"api": "http://ellislab.com/codeigniter/user-guide/database/connecting.html"
			},
			"execute-hardcoded": {
				"code": [
					"DB::select(\"SELECT * FROM mytable WHERE status = 'live'\");",
					"DB::insert(…);",
					"DB::update(…);",
					"DB::delete(…);",
					"DB::statement(…);"
				],
				"api": "http://laravel.com/docs/database#running-queries"
			},
			"execute-dynamic": {
				"code": "DB::select(\"SELECT * FROM mytable WHERE status = ? and author = ?\", array($status, $author))",
				"api": "http://laravel.com/docs/database#running-queries"
			},
			"row-count": {
				"code": "$allRows = DB::select(…); count($allRows);",
				"api": "http://laravel.com/docs/database#running-queries"
			},
			"retrieve-all-rows": {
				"code": "$allRows = DB::select(…)",
				"api": "http://laravel.com/docs/database#running-queries"
			}
		},
		"migrations": {
			"create-migration": {
				"code": "php artisan migrate:make create_users_table",
				"api": "http://laravel.com/docs/migrations"
			},
			"create-table": {
				"code": [
					"Schema::create('users', function($table)",
					"{",
					"    $table->increments('id');",
					"});"
				],
				"api": "http://laravel.com/docs/schema#creating-and-dropping-tables"
			},
			"drop-table": {
				"code": "Schema::drop('users');",
				"api": "http://laravel.com/docs/migrations"
			},
			"add-column": {
				"code": [
					"Schema::table('users', function($table)",
					"{",
					"    $table->string('email');",
					"});"
				],
				"api": "http://laravel.com/docs/schema#adding-columns"
			},
			"drop-column": {
				"code": [
					"Schema::table('users', function($table)",
					"{",
					"    $table->dropColumn('votes', 'avatar', 'location');",
					"});"
				],
				"api": "http://laravel.com/docs/schema#dropping-columns"
			},
			"add-index": [
				{
					"code": "$table->string('email')->unique();",
					"api": "http://laravel.com/docs/schema#adding-indexes"
				},
				{
					"code": [
						"$table->primary('id');",
						"$table->primary(array('first', 'last'));",
						"$table->unique('email');",
						"$table->index('state');"
					],
					"api": "http://laravel.com/docs/schema#adding-indexes"
				}
			],
			"drop-index": {
				"code": [
					"$table->dropPrimary('users_id_primary');",
					"$table->dropUnique('users_email_unique');",
					"$table->dropIndex('geo_state_index');"
				],
				"api": "http://laravel.com/docs/schema#dropping-indexes"
			},
			"add-foreign-key": {
				"code": [
					"$table->foreign('user_id')",
					"    ->references('id')->on('users')",
					"    ->onDelete('cascade');"
				],
				"api": "http://laravel.com/docs/schema#foreign-keys"
			},
			"drop-foreign-key": {
				"code": "$table->dropForeign('posts_user_id_foreign');",
				"api": "http://laravel.com/docs/schema#foreign-keys"
			},
			"run-migrations": {
				"code": "php artisan migrate",
				"api": "http://laravel.com/docs/migrations"
			},
			"rollback-last-migration": {
				"code": "php artisan migrate:rollback",
				"api": "http://laravel.com/docs/migrations"
			},
			"rollback-all-migrations": {
				"code": "php artisan migrate:reset",
				"api": "http://laravel.com/docs/migrations"
			},
			"rerun-migrations": {
				"code": "php artisan migrate:refresh",
				"api": "http://laravel.com/docs/migrations"
			}
		},
		"orm": {
			"define-table": {
				"code": [
					"class User extends Eloquent {",
					"    protected $table = 'my_users'; // optional",
					"}"
				],
				"api": "http://laravel.com/docs/eloquent#basic-usage"
			},
			"one-to-many": {
				"code": [
					{
						"file": "Post.php",
						"contents": [
							"class Post extends Eloquent {",
							"    public function comments() {",
							"        return $this->hasMany('Comment');",
							"    }",
							"}"
						]
					},
					{
						"file": "Comment.php",
						"contents": [
							"class Comment extends Eloquent {",
							"    // optional, only if you need the many-to-one",
							"    public function post() {",
							"        return $this->belongsTo('Post');",
							"    }",
							"}"
						]
					},
					{
						"contents": [
							"$comments = Post::find(1)->comments;"
						]
					}
				],
				"api": "http://laravel.com/docs/eloquent#one-to-many"
			},
			"many-to-many": {
				"code": [
					{
						"file": "User.php",
						"contents": [
							"class User extends Eloquent {",
							"    public function roles() {",
							"        return $this->belongsToMany('Role');",
							"    }",
							"}"
						]
					},
					{
						"file": "Role.php",
						"contents": [
							"class Role extends Eloquent {",
							"    // optional, only if you need the reverse relation",
							"    public function users() {",
							"        return $this->belongsToMany('User');",
							"    }",
							"}"
						]
					},
					{
						"contents": "$roles = User::find(1)->roles;"
					}
				],
				"api": "http://laravel.com/docs/eloquent#many-to-many-polymorphic-relations"
			},
			"insert": [
				{
					"code": [
						"$user = new User;",
						"$user->name = 'John';",
						"$user->save();"
					],
					"api": "http://laravel.com/docs/eloquent#insert-update-delete"
				},
				{
					"code": "$user = User::create(array('name' => 'John'));",
					"api": "http://laravel.com/docs/eloquent#insert-update-delete"
				}
			],
			"update": {
				"code": [
					"$user = User::find(1);",
					"$user->email = 'john@foo.com';",
					"$user->save();"
				],
				"api": "http://laravel.com/docs/eloquent#insert-update-delete"
			},
			"update-many": {
				"code": "$affectedRows = User::where('votes', '>', 100)->update(array('status' => 2));",
				"api": "http://laravel.com/docs/eloquent#insert-update-delete"
			},
			"delete": [
				{
					"code": [
						"$user = User::find(1);",
						"$user->delete();"
					],
					"api": "http://laravel.com/docs/eloquent#insert-update-delete"
				},
				{
					"code": "User::destroy(1);",
					"api": "http://laravel.com/docs/eloquent#insert-update-delete"
				}
			],
			"delete-many": [
				{
					"code": "User::destroy(1, 2, 3);",
					"api": "http://laravel.com/docs/eloquent#insert-update-delete"
				},
				{
					"code": "User::destroy(array(1, 2, 3));",
					"api": "http://laravel.com/docs/eloquent#insert-update-delete"
				},
				{
					"code": "$affectedRows = User::where('votes', '>', 100)->delete();",
					"api": "http://laravel.com/docs/eloquent#insert-update-delete"
				}
			],
			"find-by-id": {
				"code": "$user = User::find(1);",
				"api": "http://laravel.com/docs/eloquent#basic-usage"
			},
			"find-many": {
				"code": "$users = User::where('votes', '>', 100)->get();",
				"api": "http://laravel.com/docs/eloquent#basic-usage"
			},
			"find-by-custom-sql": {
				"code": "$users = User::whereRaw('age > ? and votes = 100', array(25))->get();",
				"api": "http://laravel.com/docs/eloquent#basic-usage"
			},
			"all": {
				"code": "$users = User::all();",
				"api": "http://laravel.com/docs/eloquent#basic-usage"
			},
			"count": {
				"code": "$count = User::where('votes', '>', 100)->count();",
				"api": "http://laravel.com/docs/eloquent#basic-usage"
			}
		},
		"templating": {
			"render-to-browser": {
				"code": [
					"// within controller action",
					"return View::make('greeting', $data)"
				],
				"api": "http://laravel.com/docs/responses#views"
			},
			"render-to-variable": {
				"code": "$output = View::make('greeting', $data)",
				"api": "http://laravel.com/docs/responses#views"
			},
			"output-raw": {
				"code": "{{ $userGenHtml }}",
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"output-escape-html": {
				"code": "{{{ $name }}}",
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"if": {
				"code": [
					"@if (count($records) === 1)",
					"    I have one record!",
					"@elseif(count($records) > 1)",
					"    I have multiple records!",
					"@else",
					"    I don't have any records!",
					"@endif"
				],
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"while": {
				"code": [
					"@while (true)",
					"    I'm looping forever.",
					"@endwhile"
				],
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"for": {
				"code": [
					"@for ($i = 0; $i < 10; $i++)",
					"    The current value is {{ $i }}",
					"@endfor"
				],
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"for-each": {
				"code": [
					"@foreach ($users as $user)",
					"    <p>This is user {{ $user->id }}</p>",
					"@endforeach"
				],
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"comment": {
				"code": "{{-- This comment will not be in the rendered HTML --}}",
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"execute-code": {
				"code": [
					"{{{ myfunction($var) }}}",
					"{{-- note: always outputs --}}"
				],
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"subview": {
				"code": "@include('view.name', array('some'=>'data'))",
				"api": "http://laravel.com/docs/templates#other-blade-control-structures"
			},
			"layout": {
				"code": [
					{
						"file": "app/views/layouts/master.blade.php",
						"contents": [
							"<html>",
							"    <body>",
							"        @section('sidebar')",
							"            This is the master sidebar.",
							"        @show",
							"",
							"        <div class='container'>",
							"            @yield('content')",
							"        </div>",
							"    </body>",
							"</html>"
						]
					},
					{
						"file": "app/views/yourview.blade.php",
						"contents": [
							"@extends('layouts.master')",
							"",
							"@section('sidebar')",
							"    @parent",
							"",
							"    <p>This is appended to the master sidebar.</p>",
							"@stop",
							"",
							"@section('content')",
							"    <p>This is my body content.</p>",
							"@stop"
						]
					}
				],
				"api": "http://laravel.com/docs/templates#blade-templating"
			}
		},
		"mvc": {
			"route": {
				"code": [
					{
						"file": "app/routes.php",
						"contents": "Route::get('product/{num}', 'CatalogController@productLookup');"
					}
				],
				"api": "http://laravel.com/docs/controllers#basic-controllers"
			},
			"controller-action": {
				"code": [
					"class SampleController extends BaseController {",
					"    public function myaction($id) {…}",
					"}"
				],
				"api": "http://laravel.com/docs/controllers#basic-controllers"
			},
			"render-view": {
				"code": "return View::make('viewname', $data)",
				"api": "http://laravel.com/docs/responses#views"
			},
			"url": {
				"code": [
					"action('MyController@myAction', $params);",
					"route('routename', $params);"
				],
				"api": "http://laravel.com/docs/helpers#urls"
			},
			"output-form-element": {
				"code": [
					"echo Form::model($user, array('route' => array('user.update', $user->id)))",
					"echo Form::text('myfield', 'mydefaultvalue');"
				],
				"api": "http://laravel.com/docs/html"
			},
			"log": {
				"code": "Log::info('hello, log!')",
				"api": "http://laravel.com/docs/errors#logging"
			},
			"csrf-protection": {
				"code": [
					{
						"file": "app/routes.php",
						"contents": [
							"Route::post('users/create', array(",
							"    'before'=>'csrf',",
							"    'uses' => 'UsersController@create',",
							"    'as' => 'security.csrf'",
							"));"
						]
					},
					{
						"file": "app/views/yourview.blade.php",
						"contents": [
							"{{ Form::open() }}",
							"<!-- includes CSRF token -->"
						]
					}
				]
			}
		}
	}
}