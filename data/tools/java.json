{
	"id": "java",
	"name": "Java",
	"api": "http://docs.oracle.com/javase/7/docs/api/",
	"featuresets": {
		"basics": {
			"hello-world": {
				"code": [
					"class HelloWorldApp {",
					"    public static void main(String[] args)",
					"    {",
					"        System.out.println(\"Hello, World!\");",
					"    }",
					"}"
				],
				"api": "http://docs.oracle.com/javase/tutorial/getStarted/cupojava/unix.html#unix-2a"
			}
		},
		"types": {
			"is-string": {
				"code": "myobj instanceof String",
				"api": "http://www.java2s.com/Tutorial/Java/0060__Operators/TheinstanceofKeyword.htm"
			},
			"is-date": {
				"code": "myobj instanceof Date",
				"api": "http://www.java2s.com/Tutorial/Java/0060__Operators/TheinstanceofKeyword.htm"
			},
			"is-regex": {
				"code": "myobj instanceof java.util.regex.Pattern",
				"api": "http://www.java2s.com/Tutorial/Java/0060__Operators/TheinstanceofKeyword.htm"
			},
			"is-array": {
				"code": "myobj instanceof java.util.List",
				"api": "http://www.java2s.com/Tutorial/Java/0060__Operators/TheinstanceofKeyword.htm"
			},
			"is-associative-array": {
				"code": "myobj instanceof java.util.Map",
				"api": "http://www.java2s.com/Tutorial/Java/0060__Operators/TheinstanceofKeyword.htm"
			},
			"is-null": {
				"code": "null == myobj",
				"api": "http://www.java2s.com/Tutorial/Java/0060__Operators/TheinstanceofKeyword.htm"
			},
			"string-to-int": {
				"code": "Integer.parseInt( mystr )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#parseInt(java.lang.String)"
			},
			"int-to-string": {
				"code": "Integer.toString( myint )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#toString(int)"
			},
			"string-to-float": {
				"code": "Float.parseFloat( mystr )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Float.html#parseFloat(java.lang.String)"
			},
			"float-to-string": {
				"code": "Float.toString( myfloat )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Float.html#toString(float)"
			},
			"float-to-int": {
				"code": "(int)myfloat"
			}
		},
		"strings": {
			"length": {
				"code": "mystring.length()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#length()"
			},
			"comparison": {
				"code": "a.equals(b)",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#equals(java.lang.Object)"
			},
			"lowercase": {
				"code": "str.toLowerCase()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase()"
			},
			"uppercase": {
				"code": "str.toUpperCase()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toUpperCase()"
			},
			"substring": {
				"code": "str.substring( start[, end] )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring(int, int)"
			},
			"concatenate": [
				{
					"code": "a + b // only use for two strings max",
					"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html"
				},
				{
					"code": [
						"StringBuffer buf = new StringBuffer();",
						"buf.append(a);",
						"buf.append(b);",
						"buf.append(c);",
						"buf.toString();"
					],
					"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html"
				},
				{
					"code": [
						"StringBuilder buf = new StringBuilder();",
						"buf.append(a);",
						"buf.append(b);",
						"buf.append(c);",
						"buf.toString();"
					],
					"version": "1.5",
					"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html"
				}
			],
			"index-of": {
				"code": "str.indexOf( mysubstring )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)"
			},
			"trim": {
				"code": "str.trim()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#trim()"
			},
			"replace": {
				"code": "str.replaceAll( myregex, tmpl )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#replaceAll(java.lang.String, java.lang.String)"
			},
			"split-on-string": {
				"code": "str.split( delim )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#split(java.lang.String)"
			},
			"split-on-regex": {
				"code": "str.split( myregex )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#split(java.lang.String)"
			},
			"regex-match": {
				"code": "str.matches( myregex )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#matches(java.lang.String)"
			},
			"regex-find": {
				"code": [
					"import java.util.regex.Matcher;",
					"import java.util.regex.Pattern;",
					"",
					"…",
					"Pattern pattern = Pattern.compile(myregex);",
					"Matcher matcher = pattern.matcher(string);",
					"while( matcher.find() ) {",
					"    String matchedSubstring = matcher.group();",
					"}"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#find()"
			},
			"regex-replace": {
				"code": "str.replaceAll( myregex, tmpl )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#replaceAll(java.lang.String, java.lang.String)"
			}
		},
		"math": {
			"floor": {
				"code": "Math.floor(myfloat)",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#floor(double)"
			},
			"ceiling": {
				"code": "Math.ceil(myfloat)",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#ceil(double)"
			},
			"round": {
				"code": "Math.round(myfloat)",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#round(float)"
			},
			"random": {
				"code": [
					"import java.util.Random;",
					"",
					"…",
					"Random r = new Random(seed);",
					"min + r.nextInt(max-min+1);"
				],
				"api": "http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)"
			},
			"min": {
				"code": "java.util.Collections.min(mylist)",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#min(java.util.Collection)"
			},
			"max": {
				"code": "java.util.Collections.max(mylist)",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#max(java.util.Collection)"
			}
		},
		"dates": {
			"date-object": {
				"code": "new Date()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Date.html#Date()"
			},
			"timestamp": {
				"code": "System.currentTimeMillis()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#currentTimeMillis()"
			},
			"format": {
				"code": [
					"SimpleDateFormat df = new SimpleDateFormat(myformat);",
					"df.format(mydate);"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"
			},
			"parse": {
				"code": [
					"SimpleDateFormat df = new SimpleDateFormat(myformat);",
					"df.parse(mystring);"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"
			},
			"compare": {
				"code": [
					"a.before(b);",
					"a.after(b);",
					"a.compareTo(b);"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Date.html#compareTo(java.util.Date)"
			},
			"offset": {
				"code": [
					"Calendar cal = Calendar.getInstance();",
					"cal.setTime(mydate);",
					"cal.add( MONTH, 1 );",
					"Date mydate = cal.getTime();"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Calendar.html#add(int, int)"
			}
		},
		"collections": {
			"define": {
				"code": "List<type> mylist = new ArrayList<type>();",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#ArrayList()"
			},
			"define-associative": {
				"code": "Map<type> mymap = new HashMap<type>();",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html#HashMap()"
			},
			"length": {
				"code": "mylist.size()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/List.html#size()"
			},
			"set": {
				"code": "mylist.add( index, value )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/List.html#add(int, E)"
			},
			"set-associative": {
				"code": "mymap.put( key, value )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#put(K, V)"
			},
			"get": {
				"code": "mylist.get( index )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/List.html#get(int)"
			},
			"get-associative": {
				"code": "mymap.get( key )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#get(java.lang.Object)"
			},
			"push": {
				"code": [
					"Deque deque = new ArrayDeque<type>();",
					"deque.push( myval )"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html#push(E)"
			},
			"pop": {
				"code": "deque.pop()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html#pop()"
			},
			"merge": {
				"code": [
					"List newlist = new ArrayList(a);",
					"newlist.addAll(b);"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/List.html#addAll(java.util.Collection)"
			},
			"slice": {
				"code": "mylist.subList( start, end );",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/List.html#subList(int, int)"
			},
			"for-each": {
				"code": "for( String elm : mylist ) {…}",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.14.2"
			},
			"for-each-associative": {
				"code": [
					"for( String key : mymap.keySet() ) {",
					"    String value = mymap.get(key);",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.14.2"
			},
			"keys": {
				"code": "mymap.keySet()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#keySet()"
			},
			"values": {
				"code": "mymap.values()",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#values()"
			},
			"contains": {
				"code": "mylist.contains(val)",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/List.html#contains(java.lang.Object)"
			},
			"index-of": {
				"code": "myarray.indexOf(val)",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/List.html#indexOf(java.lang.Object)"
			},
			"sort": {
				"code": [
					"java.util.Collections.sort( mylist,",
					"    new Comparator<String>() {",
					"        public int compare (String a, String a ) {…}",
					"    }",
					")"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#sort(java.util.List, java.util.Comparator)"
			},
			"reverse": {
				"code": "java.util.Collections.reverse( mylist )",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#reverse(java.util.List)"
			}
		},
		"functions": {
			"n-arguments": {
				"code": [
					"int mymethod( int... args ) {",
					"    for( int i : args ) {",
					"        …",
					"    }",
					"}"
				],
				"version": "5.0",
				"api": "http://www.java-tips.org/java-se-tips/java.lang/how-to-pass-unspecified-number-of-arguments-to-a-m.html"
			},
			"overloading": {
				"code": [
					"function myfunc( int arg ) {…}",
					"function myfunc( float arg ) {…}",
					"function myfunc( String arg ) {…}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.9"
			}
		},
		"objects": {
			"define-class": {
				"code": "class MyClass {…}",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1"
			},
			"instantiate-class": {
				"code": "MyClass myinstance = new MyClass();",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.9"
			},
			"instance-of": {
				"code": "$myobj instanceof MyClass",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.20.2"
			},
			"class-of": {
				"code": [
					"myobj.getClass()",
					"myobj.getClass().getName()"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#getClass()"
			},
			"define-field": {
				"code": [
					"class MyClass {",
					"    String myfield;",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.2"
			},
			"access-field": {
				"code": "myinstance.myfield",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.11"
			},
			"has-field": {
				"code": "myobj.getClass().getField('fieldname') // may throw NoSuchFieldException",
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getField(java.lang.String)"
			},
			"define-method": {
				"code": [
					"class MyClass {",
					"    function mymethod( $arg1, $arg2 ) {…}",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4"
			},
			"call-method": {
				"code": "myinstance.mymethod( val1, val2 )",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12"
			},
			"has-method": {
				"code": [
					"Class[] cArg = new Class[1];",
					"cArg[0] = String.class;",
					"c.getMethod('mymethod',cArg); // may throw NoSuchMethodException"
				],
				"api": "http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getMethod(java.lang.String, java.lang.Class...)"
			},
			"this": {
				"code": "this",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.8.3"
			},
			"define-constant": {
				"code": [
					"class MyClass {",
					"    public static final int MYCONSTANT = 27;",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.4"
			},
			"access-constant": {
				"code": "MyClass.MYCONSTANT",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.28"
			},
			"define-class-field": {
				"code": [
					"class MyClass {",
					"    public static int myclassfield;",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1.1"
			},
			"access-class-field": {
				"code": "MyClass.myclassfield",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1.1"
			},
			"define-class-method": {
				"code": [
					"class MyClass {",
					"    public static int myclassmethod() {…}",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.3.2"
			},
			"call-class-method": {
				"code": "MyClass.myclassmethod()",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.3.2"
			},
			"constructor": {
				"code": [
					"class MyClass {",
					"    MyClass() {…}",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.8"
			},
			"inheritance": {
				"code": "class MyChildClass extends MyParentClass {…}",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1.4"
			},
			"parent-method": {
				"code": [
					"class MyChildClass extends MyParentClass {",
					"    function mymethod() {",
					"        super.mymethod();",
					"    }",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12"
			},
			"declare-public": {
				"code": [
					"class MyClass {",
					"    public int myfield;",
					"    public int mymethod() {…}",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.6"
			},
			"declare-protected": {
				"code": [
					"class MyClass {",
					"    protected int myfield;",
					"    protected int mymethod() {…}",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.6"
			},
			"declare-private": {
				"code": [
					"class MyClass {",
					"    private int myfield;",
					"    private int mymethod() {…}",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.6"
			},
			"declare-final": {
				"code": [
					"class MyClass {",
					"    public final int mymethod() {…}",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.3.3"
			},
			"declare-interface": {
				"code": [
					"interface MyInterface {",
					"    public function myfunction();",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html#jls-9.1"
			},
			"implement-interface": {
				"code": [
					"class MyClass implements MyInterface {",
					"    public function myfunction() {…}",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1.5"
			},
			"abstract-class": {
				"code": [
					"abstract class MyClass {",
					"    public abstract function myAbstractFunction();",
					"    public function myConcreteFunction(…);",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1.1.1"
			}
		},
		"exceptions": {
			"throw-exception": {
				"code": "throw new Exception($message)",
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.18"
			},
			"catch-exception": {
				"code": [
					"try {",
					"    …",
					"} catch( SpecificTypeOfException e ) {",
					"    …",
					"} catch( AnotherTypeOfException e ) {",
					"    …",
					"}"
				],
				"api": "http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.20"
			}
		}
	}
}
